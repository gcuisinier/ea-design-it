relationship ManyToMany {
	LandscapeView{flows(alias)} to FunctionalFlow{landscape(diagramName) required}
}
relationship ManyToMany {
	FunctionalFlow{interfaces(alias)} to FlowInterface{functionalFlows(alias)}
}
relationship ManyToOne {
	FlowInterface{source(name) required} to Application
	FlowInterface{target(name) required} to Application
	FlowInterface{sourceComponent(name)} to ApplicationComponent
	FlowInterface{targetComponent(name)} to ApplicationComponent
}

relationship OneToMany {
	FlowInterface{dataFlows} to DataFlow{flowInterface(alias) required}
}

relationship ManyToOne {
	FlowInterface{protocol(name)} to Protocol
}

relationship ManyToMany {
	DataFlow{functionalFlows(alias) required} to FunctionalFlow{dataFlows}
}


relationship ManyToOne {
	ApplicationComponent{application(name) required} to Application{applicationsList(name)}
}


// Ownership for Lanscape && Interfaces
// Functional Flows ownership inheried from LanscapeView
relationship ManyToOne {
	LandscapeView{owner(name)} to Owner
	FlowInterface{owner(name)} to Owner
    Application{owner(name)} to Owner
}

relationship OneToMany {
	DataFlow{items} to DataFlowItem{dataFlow}
}


entity LandscapeView {
    viewpoint ViewPoint
	diagramName String // Example ADD_Payment_Landscape
    compressedDrawXML TextBlob
    compressedDrawSVG TextBlob
}

entity Owner {
	name String
}

entity FunctionalFlow {
    alias String
    description String maxlength(1000)
    comment String
    status String
    documentationURL String maxlength(500)
    documentationURL2 String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}

entity FlowInterface {
    alias String pattern(/^[A-Z]{3}-[0-9]{2,4}$/)
    status String
    documentationURL String maxlength(500)
    documentationURL2 String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}

entity Application {
	alias String pattern(/^HPX\.CMP\.[0-9]{8}$/)
	name String,
    description String maxlength(1000)
    type ApplicationType
	technology String
    comment String 
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}

entity Protocol {
	name String
    type ProtocolType
    description String maxlength(1000)
    scope String
}

/**
 * DataFlow represents 
 * - A file when Protocol=FILE
 * - A topic when Protocol=Event
 * - A Swagger when Protocol=API
 * - A WSDL when Protocol=SOAP
 * - An XSD when Protocol=ESB, MESSAGING
 */
entity DataFlow {
    resourceName String /** TOPIC name for event, FileName for Files*/
    description String maxlength(1000)
    frequency Frequency
    format Format
    contractURL String /** Swagger or XSD URL */
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate    
}

/**
 * DataFlow represents 
 * - A Event when DataFlow.Protocol=Event
 */
entity DataFlowItem {
    resourceName String
    description String maxlength(1000)  
    contractURL String maxlength(500)
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}


entity ApplicationComponent {
	name String,
    description String maxlength(1000),
    type ApplicationType
    technology String 
    comment String 
    documentationURL String maxlength(500)
    startDate LocalDate
    endDate LocalDate
}

enum ViewPoint {
  APPLICATION_LANDSCAPE
}

enum ProtocolType {
  API
  ESB
  EVENT
  FILE
  MESSAGING
  SOAP
  ETL
  DB
  FRONT
  OTHER
}

enum Frequency {
	DAILY
    WEEKLY
    ON_DEMAND
}

enum Format {
	XML
    JSON
    CSV
}

enum ApplicationType {
	MICROSERVICE
    EXTERNAL
    JAVA
    PACKAGE
    INFRASTRUCTURE
    GINKO
    FRONT
    PARTNER
    MIDDLEWARE
}

// ADD Helper for import, not part of main model

entity ApplicationImport(tmp_import_application_import) {
	importId String
    excelFileName String
    idFromExcel String,
	name String,
    description String 
    type String
	technology String
    comment String 
    importStatus ImportStatus
    importStatusMessage String
    existingApplicationID String // ID of Application when importStatus = EXISINT or UPDATED
}


enum ImportStatus {
    NEW
	EXISTING
    UPDATED
    ERROR
}


entity FlowImport(tmp_import_flows) {
    idFlowFromExcel String
    flowAlias String
    sourceElement String
    targetElement String
    description String
    integrationPattern String
  	frequency String
  	format String
	swagger String
  	sourceURLDocumentation String
  	targetURLDocumentation String
  	sourceDocumentationStatus String
  	targetDocumentationStatus String
  	flowStatus String
  	comment String
  	documentName String
    importInterfaceStatus ImportStatus
    importFunctionalFlowStatus ImportStatus
	importDataFlowStatus ImportStatus
	importStatusMessage String
}


