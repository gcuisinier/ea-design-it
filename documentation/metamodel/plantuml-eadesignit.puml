@startuml
LandscapeView "1" *-down- "n" FunctionalFlow : flows
FunctionalFlow "n" o-down- "1" Interface : flows
'FunctionalFlow "1" o-- "n" DataFlow
DataFlow "n" -right-o "1" Interface
DataFlow "n" -up-o "n" FunctionalFlow




Interface "n" o-right- "1" Application : source
Interface "n" o-right- "1" Application : target
Interface "n" o-- "1" ApplicationComponent : source
Interface "n" o-- "1" ApplicationComponent : target

Application "1" o-- "n" ApplicationComponent : module

DataFlow "1" o-- "n" DataFlowItem




Class LandscapeView {
   String diagramName 
   String owner
}
note left of LandscapeView
  LanscapeView is for example a 
  target landscape schema in a ADD
  
  The name 'view' come from in TOGAF vocabulary
  A view responds to a template (viewpoint)

  A landscape view is composed of <b>FunctionalFlow</b>
end note 

Class FunctionalFlow {
   String alias
   String description
   String comment
   String status
	Interface interfaces
}
note left of FunctionalFlow
  In the context of a <b>LandscapeView</b>,
  a FunctionalFlow represents a functional information 
  exchange between two applications
  
  A FunctionalFlow leverage on a <b>Inteface</b> to transfer
  information between source and target
end note 

Class Interface {
   Application source
   Application target
   String protocol
   String status
   String owner
}
note top of Interface
   Interface is a "pipeleline" defined by 
    - a source <b>Application</b>
    - a target <b>Applications</b>
    - a protocol (API, Files, Events)
   A Functional Flow is implemented 
   through one or more <b>Interface</b>
end note


Class Application {
   String name
   String description
   String comment
   String type
   String owner
   String technology
}

Class ApplicationComponent {
   String name
   String description
   String comment
   String type
   String owner
   String technology
}


Class DataFlow {
    frequency Frequency
    format Format
    type FlowType
    description String
    resourceName String
    contractURL String
    documentationURL String
}


note left of DataFlow
  Exchange data, is modeled by a <b>Data Flow</b>.
  A Data flow is implemented :
   - through <u>one</u> specific <b>Interface</b>, 
   - in the context of <u>one or more</u> <b>Functional Flow</b>
  
  DataFlow is a <b>File</b>, an <b>Event-Topic</b> or an <b>API</b>

  Format is JSON, XML, CSV, etc.
end note 


Class DataFlowItem {
   String name
   String xsdURL
}

note left of DataFlowItem
   When DataFlow is of type Event-Topic, 
   we need a additional object to model a 
   specific Event in a Topic
end note
@enduml