@startuml
LandscapeView "1" *-down- "n" FunctionalFlow : flows
FunctionalFlow "n" o-down- "1" Interface : flows
'FunctionalFlow "1" o-- "n" DataFlow
DataFlow "n" -right-o "1" Interface
DataFlow "n" -up-o "n" FunctionalFlow




Interface "1" o-- "1" Application : source
Interface "1" o-- "1" Application : target
Application "1" o-- "n" ApplicationComponent : module
DataFlow <|-- FileDataFlow
DataFlow <|-- EventDataFlow
DataFlow <|-- APIDataFlow

'DataFlow "1" o-left- "1" ApplicationComponent : source
'DataFlow "1" o-left- "1" ApplicationComponent : target



Class LandscapeView {
   String diagramName 
}
note left of LandscapeView
  LanscapeView is for example a 
  target landscape schema in a ADD
  
  The name 'view' come from in TOGAF vocabulary
  A view responds to a template (viewpoint)

  A landscape view is composed of <b>FunctionalFlow</b>
end note 

Class FunctionalFlow {
    String alias
    String description
    String comment
	Interface interface
	String frequency
}
note left of FunctionalFlow
  In the context of a <b>LandscapeView</b>,
  a FunctionalFlow represents a functional information 
  exchange between two applications
  
  A FunctionalFlow leverage on a <b>Inteface</b> to transfer
  information between source and target
end note 

Class Interface {
    String id
    Application source
    Application target
	String protocol
    format Format,
    status String,
}
note top of Interface
   Interface is a "pipeleline" defined by 
    - a source <b>Application</b>
    - a target <b>Applications</b>
    - a protocol (API, Files, Events)
   A Functional Flow is implemented 
   through one or more <b>Interface</b>
end note


Class Application {
String name
String description
}

Class ApplicationComponent {
String name
String description
String technology
}


Class DataFlow {
}
note left of DataFlow
  Exchange data, is modeled by a <b>Data Flow</b>.
  A Data flow is implemented :
   - through a specific <b>Interface</b>, 
   - in the context of one or more <b>Functional Flow</b>
  
  DataFlow is a <b>File</b>, an <b>Event</b> or an <b>API</b>
end note 


Class FileDataFlow <?extends DataFlow > {
   String fileName
   String description
   String documentationURL
}

Class EventDataFlow <?extends DataFlow > {
   String topicName
   String description
   String xsdURL
}

Class APIDataFlow <?extends DataFlow > {
   String swaggerURL
}
@enduml